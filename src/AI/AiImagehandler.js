const {spawn} = require('child_process');
const fs = require('fs');


const genQueue = [];
let isRunning = false

class imageQueueJob {
    constructor(interaction, prompt) {
        this.interaction = interaction
        this.prompt = prompt;
    }
}

function makeImage(prompt, interaction) {

    const job = new imageQueueJob(interaction, prompt);
    genQueue.push(job);
    if (!isRunning) {
        runImageJobHandler();
    }
    return interaction.reply({content: "Image generation started, please wait for the result, currently in queue position " + genQueue.length + ".", ephemeral: true });
}




async function runImageJobHandler (){
    isRunning = true;
    
    while (genQueue.length > 0) {
        const job = genQueue.shift();
        const interaction = job.interaction;
        const prompt = job.prompt;

        let imageURL = "./output.png"; // Adjust this path as needed

        const workerPromise = new Promise((resolve, reject) => {
            const worker = spawn('python3', ['src/AI/imageGen.py', `"${prompt}"`]);

            worker.stdout.on('data', (data) => {
                console.log(`stdout: ${data}`);
            });

            worker.stderr.on('data', (data) => {
                console.error(`stderr: ${data}`);
            });

            worker.on('close', (code) => {
                console.log(`child process exited with code ${code}`);
                if (code !== 0) {
                    reject(`Image generation failed with code ${code}`);
                } 
                else {

                    interaction.channel.send({
                        content: prompt + "\nGenerated by " + interaction.user.username,
                        files: [imageURL]
                    });

                }
                resolve();
            });
        });
        try{
            await workerPromise;
        }
        catch (error) {
            console.error("Error in image generation job:", error);
            interaction.channel.send({
                content: "An error occurred while generating the image for prompt " + prompt + " by " + interaction.user.username + ". Please try again later.",
            });
        }
        finally {
            // Clean up the output file after processing
            if (fs.existsSync(imageURL)) {
                 fs.unlinkSync(imageURL);
             }
        }
        console.log("Image job handler finished processing a job.");


    }
    isRunning = false;
    console.log("Image job handler finished processing all jobs.");
    return true;
   
}


exports.makeImage = makeImage;